'''
#!/usr/bin/env python
import gmpy2
from Crypto.Util.number import *
from binascii import a2b_hex, b2a_hex
flag = '******************'
p = 0xED7FCFABD3C81C78E212323329DC1EE2BEB6945AB29AB51B9E3A2F9D8B0A22101E467
q = 0xAD85852F9964DA87880E48ADA5C4487480AA4023A4DE2C0321C170AD801C9
e = 65537
n = p * q
c = pow(int(b2a_hex(flag), 16), e, n)
print(c)
c = 0x75AB3202DE3E103B03C680F2BEBBD1EA689C8BF260963FE347B3533B99FB391F0A358FFAE5160D6DCB9FCD75CD3E46B2FE3CFFE9FA2E9508702FD6E4CE43486631

'''


from Crypto.Util.number import *
import gmpy2
import base64

p = int("0xED7FCFABD3C81C78E212323329DC1EE2BEB6945AB29AB51B9E3A2F9D8B0A22101E467", 16)
q = int("0xAD85852F9964DA87880E48ADA5C4487480AA4023A4DE2C0321C170AD801C9", 16)
e = 65537
n = p * q
c = int("0x75AB3202DE3E103B03C680F2BEBBD1EA689C8BF260963FE347B3533B99FB391F0A358FFAE5160D6DCB9FCD75CD3E46B2FE3CFFE9FA2E9508702FD6E4CE43486631", 16)

phi = (p-1)*(q-1)  # 求φ(n)，φ(n)=(p-1)(q-1)
d = gmpy2.invert(e, phi)  # 求e对于模n的逆元，即解密指数d
m = pow(c, d, n)  # m=c^e mod n，m为10进制格式
flag = long_to_bytes(m)  # m的字符串形式
print(base64.b64decode(flag))  # 上面得到的flag是base64编码，进行一次base64解码即可
